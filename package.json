{
  "_args": [
    [
      {
        "raw": "nodedata@https://github.com/ratneshsinghparihar/Node-Data/tarball/feature/wstesting",
        "scope": null,
        "escapedName": "nodedata",
        "name": "nodedata",
        "rawSpec": "https://github.com/ratneshsinghparihar/Node-Data/tarball/feature/wstesting",
        "spec": "https://github.com/ratneshsinghparihar/Node-Data/tarball/feature/wstesting",
        "type": "remote"
      },
      "D:\\zebpay\\node-sample-websocket"
    ]
  ],
  "_from": "https://github.com/ratneshsinghparihar/Node-Data/tarball/feature/wstesting",
  "_id": "nodedata@1.0.0-dev.170905063712",
  "_inCache": true,
  "_location": "/nodedata",
  "_phantomChildren": {},
  "_requested": {
    "raw": "nodedata@https://github.com/ratneshsinghparihar/Node-Data/tarball/feature/wstesting",
    "scope": null,
    "escapedName": "nodedata",
    "name": "nodedata",
    "rawSpec": "https://github.com/ratneshsinghparihar/Node-Data/tarball/feature/wstesting",
    "spec": "https://github.com/ratneshsinghparihar/Node-Data/tarball/feature/wstesting",
    "type": "remote"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://github.com/ratneshsinghparihar/Node-Data/tarball/feature/wstesting",
  "_shasum": "e6806459fec85a064d08d128338a02a53dcd117d",
  "_shrinkwrap": null,
  "_spec": "nodedata@https://github.com/ratneshsinghparihar/Node-Data/tarball/feature/wstesting",
  "_where": "D:\\zebpay\\node-sample-websocket",
  "author": {
    "name": "pratikv"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/ratneshsinghparihar/Node-Data"
  },
  "dependencies": {
    "acl": "0.4.9",
    "bcrypt-nodejs": "0.0.3",
    "body-parser": "1.14.2",
    "connect-ensure-login": "0.1.1",
    "continuation-local-storage": "^3.2.0",
    "cookie-parser": "1.3.5",
    "ejs": "2.3.3",
    "elasticsearch": "10.1.3",
    "express": "4.13.3",
    "express-jwt": "3.3.0",
    "express-session": "1.13.0",
    "gulp": "3.9.0",
    "jsonwebtoken": "5.7.0",
    "linq": "3.0.5",
    "mongodb": "https://github.com/Anujarya300/node-mongodb-native/tarball/2.2",
    "mongoosastic": "4.0.2",
    "mongoose": "https://github.com/ratneshsinghparihar/mongoose/tarball/4.12",
    "morgan": "1.6.1",
    "multer": "^1.2.0",
    "noogger": "0.1.3",
    "object-hash": "1.1.8",
    "passport": "0.2.2",
    "passport-facebook": "2.1.0",
    "passport-jwt": "2.0.0",
    "passport-local": "1.0.0",
    "q": "1.4.1",
    "random-number": "0.0.9",
    "recursive-readdir-synchronous": "0.0.2",
    "reflect-metadata": "0.1.3",
    "request": "2.69.0",
    "sequelize": "3.23.2",
    "stack-trace": "0.0.10",
    "tedious": "1.14.0",
    "tslint": "3.6.0",
    "typescript": "2.2.1",
    "uuid": "3.1.0",
    "winston": "2.2.0"
  },
  "description": "Node Data",
  "devDependencies": {
    "gulp-ignore": "2.0.1",
    "gulp-livereload": "3.8.1",
    "gulp-nodemon": "2.0.6",
    "gulp-sourcemaps": "1.6.0",
    "gulp-tslint": "4.3.3",
    "gulp-typescript": "2.12.0",
    "harmonize": "1.4.4",
    "istanbul": "0.4.2",
    "jasmine": "2.4.1",
    "jasmine-node": "1.14.5",
    "supertest": "1.2.0",
    "tslint-microsoft-contrib": "2.0.2"
  },
  "license": "MIT",
  "main": "server.js",
  "name": "nodedata",
  "optionalDependencies": {},
  "readme": "[![Build Status](https://travis-ci.org/ratneshsinghparihar/Node-Data.svg?branch=master)](https://travis-ci.org/ratneshsinghparihar/Node-Data)\n\n## What is Node-Data <img src=\"node-data1.png\" height=\"200\" width=\"200\">\n\nNode-Data is unique backend framework which provides a generic interface for sql , NoSQL and graph entities and creates generic rest level 3 endpoints along with data repositories . \n\nA node-data user just define a model, provide an specification (sql ,nosql or graph) and node-data provides a API to write generic transaction and queries from  persistent layer .\n\nNode-data automatically create rest end points over models and service written by user.\nNode-data allows the relationships (one to one , manyto one etc ) with any kind of model , so essentially it allows a sql entity to have a no-sql document and vice versa . The consistency managed by framework and developers can treat all model as one type.\n\nNode-Data is a Node.js framework to expose rest data on level 3 (metadata and auto discovery).\n\nThis framework will allow declarative style (annotations) to handle most of backend concerns (data relations, transactions, rest, graphql , security) .Yes its on javascript .\n\nThe target consumers are nodejs based scale projects looking for rewrite/new.\n\nWhen you write for scale you might missed important aspect which might give you headache if you add the aspect late in your project. Node-Data will have most of aspects required in modern web scale project which can be enabled anytime using only annotations.\n\nRest level 3 is an amazing protocol allows the autodiscovery of system and application developers can write infrastructure for their code if backend api is level 3.\n\n## What backend concerns will be handled\n\n1. Rest level 3 APIs\n\n2. Model driven system\n \n3. Data repositories(Only interface)\n \n4. Auto rest end point generations from repositories\n \n5. Relations using annotations (onetoone , onetomany , manytoone , manyttomany)\n \n6. Embedded relations support (replication)\n\n7. Transaction and services using annotations\n\n8. DI container\n\n9. Caching second level\n  \n10.  Search and count (inbuilt elastic search)(repository and query dsl)\n  \n11.  Logging and auditing using annotations\n  \n12. Graphql support\n  \n13.  Meta-data API\n  \n14.  Security (inbuilt authentication) ,role based autherization , acl\n\n15. Everythingh is promise (no callback hell)\n\n16. Validation\n\n\n## Technologies used \n\nlibrary |  version |  Comment/alternative\n------------ | ------------- | -------------\nnodejs |  5.7.0 | node\nexpress | 4.13.3 | Rest middleware\nTypeScript | 1.8.4 | Rest middleware\nmonogdb | 2.1.3 | Documetndb , nosql , auto sharding\nMongoose | 4.3.5 | ORM for mongoDB\nMetadata-reflect | 0.1.3 | For reflection and metadata\ngulp | 3.9.0 | Compiling Typscript and Build process\npassport | 0.2.2 | Authentication , sso , OAtuh , jwt token\nNpm-acl | 0.4.9 | Popular acl library\nElastic search | 10.1.3 | Search and aggregation\nMongosastic | 4.0.2 | Library for integrating Mongoose with ElasticSearch\nredis | unknown | Rest middleware\n\n## How To Use without security\n\n1. Git clone https://github.com/hariadk/demo-sample.git\n2. cd demo-sample/Demo-Sample\n3. npm install\n4. tsd install\n5. Mongodb running on 27017(default port).\n6. Goto config.ts and make isAutheticationEnabled = 'disabled'\n7. open cmd, run 'gulp compile-ts' then run gulp.\n8. Post a JSON {\"name\":\"john\",\"\":\"john\"} to http://localhost:9999/data/users.\n8. Hit the api to get data(http://localhost:9999/data/users)\n9. Ensure node version is 5.7.0\n\n## How To Use with security\n\nFollow the below steps to start using the framework.\n\n1. Git clone https://github.com/hariadk/demo-sample.git\n\n2. cd demo-sample/Demo-Sample\n\n## Create a new user\n1. POST {\n\"user\":{\"name\":\"a111\",\"password\":\"a\"}\n}\nin http://localhost:9999/register.\nThis will create a new user in db.\n\n2. Now we can use this user information to login, for both session based and token based authentication\n\n3. If we need to change the logic for user creation, change the method getNewUser in current-user-detail-service.ts file.Sample code is in place.\n\nFor using session based authentication use below steps:\n\n1. Do above steps 1 & 2\n\n2. Checkout branch PasswordAuth\n\n3. npm install\n\n4. tsd install\n\n5. Mongodb running on 27017(default port).\n\n6. Post a JSON {\"name\":\"john\",\"\":\"john\"} to http://localhost:9999/data/users. This will create a test user in db.\n\n7. open cmd, run 'gulp compile-ts' then run gulp.\n\n8. Hit http://localhost:9999 which will take you to login page.\n\n9. use john as username and password, and a session will be created.\n\nFor using Token based auth use below steps\n\n1. All the steps done above except checkout branch TokenAuth.\n\n2. Once logged in , a token will be created.\n\n3. To change the token expiring time, change the file security-config.ts.\n public static tokenExpiresInMinutes: number = 2;//2 minutes\n \n4. The number indicates minutes of token expiry not hours.\n\n\n## Rest level 3 APIs\n\nNode-data exposes the entities as level 3 REST APIs in HAL format. \nRead more about: \n[HAL specification] (http://stateless.co/hal_specification.html) \n\n[Rest API levels] (http://martinfowler.com/articles/richardsonMaturityModel.html) \n \nIn short, REST level 3 in addition to HTTP verbs(get, put, post etc.) introduces the concept of discoverability. \nWhen we navigate to the base-url(assuming base-url for API is \"http://localhost:8080/data/\") for API, we get all the exposed rest APIs in the system. \n```json\n[ \n  { \n   \"roles\": \"http://localhost:8080/data/roles\" \n  }, \n  { \n   \"users\": \"http://localhost:8080/data/users\" \n  } \n] \n```\n \n### Suppose we want to get all the users in the system, we go to: \"http://localhost:8080/data/users\". \n```json\n{ \n  \"_links\": { \n   \"self\": { \n    \"href\": \"http://localhost:8080/data/users\" \n   }, \n   \"search\": { \n    \"href\": \"http://localhost:8080/data/users/search\" \n   }, \n   \"action\": { \n    \"href\": \"http://localhost:8080/data/users/action\" \n   }  \n  }, \n  \"_embedded\": [ \n   { \n    \"_id\": \"56d692a24043588c0c713564\", \n    \"email\": \"alex.b@xyz.com\", \n    \"name\": \"Alex Brown\", \n    \"_links\": { \n     \"self\": { \n      \"href\": \"http://localhost:8080/data/users/56d692a24043588c0c713564\" \n     }, \n     \"roles\":{ \n      \"href\": \"http://localhost:8080/data/users/56d692a24043588c0c713564/roles\" \n     } \n    } \n   }, \n   { \n    \"_id\": \"56d692be4043588c0c713565\", \n    \"email\": \"daniel.j@xyz.com\", \n    \"name\": \"Daniel Jones\", \n    \"_links\": { \n     \"self\": { \n      \"href\": \"http://localhost:8080/data/users/56d692be4043588c0c713565\" \n     }, \n     \"roles\":{ \n      \"href\": \"http://localhost:8080/data/users/56d692be4043588c0c713565/roles\" \n     } \n    } \n   } \n  ] \n} \n```\n\nIf we want to fetch all the roles for any user, we can simply fetch the roles url from inside the \"_links\" object for the given user. We just need to know what the base URL is, and after that we just follow the links to get any entity, its relations and so on. \n\n## Model driven system  \n\nA model driven system allow one to build a solid backend by defining model . Convention approach enables developers to define specification on models and those specifications can be execute by framework or implemented by developer it self .  \n \n```typescript\n@document({ name: 'students', strict: Strict.true })\nexport class StudentModel {\n    @field({ primary: true, autogenerated: true })\n    _id: Types.ObjectId;\n\n    @field()\n    name: string;\n\n    @field()\n    age: number;\n\n    @field()\n    gender: string;\n\n    @onetomany({ rel: 'courses', itemType: CourseModel, embedded: true })\n    course: CourseModel.CourseModel;\n    }\n``` \nHere the Student Model has attribute is decorated with document with name student which will tell the system to persist each Student Model as a document with name student and schema will be restricted.\n\n@Field will provide the specification for fields in model like primarykey , string field etc. @oneToMany annotation will build a embedded relation with couseModel in the system.\n\n## Data repositories (Only interface)\n \nData repository exposes the basic CRUD operations for a defined model which can be used anywhere in application whether services or controllers. It also allows rest path definition and  authorization settings using attributes. The framework will automatically create the implementation of the interface which can be overridden by developer if required.\n\n```typescript\n@repository({ path: 'blogs', model: BlogModel })\nexport interface BlogRepository extends dataRepository {\n\tfindByName();\n    doPublish();\n}\n```\nHere the basic CRUD operations (findone , finadall , save , saveall , delete,page) will be provided by dataRepository. custom methods can be define here and will be immplemented in services.\n\n## Unit of work\nOnce a model and its repository is ready , following code can be written\n```typescript\n let newCity = new city();\n newCity.name = name;\n newCity.post().then((sucess) => resolved(sucess));\n newCity.put().then((sucess) => resolved(sucess));\n```\n \n## Auto rest end point generations from repositories \n \nOnce the repository interface defined the framework will automatically generates the rest point . In otherward as a developer you don't need to create the controllers. \n\nlike for above BlogRepository the framework will generate and handle following automatically\n\n```html\nfindOne\nGet http://localhost:8080/data/blogs/1/\nfindAll\nGet http://localhost:8080/data/blogs/\ncreate\nPost http://localhost:8080/data/blogs/\nupdate\nPut http://localhost:8080/data/blogs/1/\ndelete\nDelete http://localhost:8080/data/blogs/1/\n\n```\n\nfor Custom methods the framework will generate and handle url like\n\n```html\nhttp://localhost:8080/data/blogs/search/findByName?name=testblog\nhttp://localhost:8080/data/blogs/searchAll?name=testblog\nhttp://localhost:8080/data/blogs/action/doPublish/\n```\n \nIf custom logic need to be added or entire repository action (like save) need to overridden then a service can be created for the custom logic and service method invocation can be done by defining in attribute over the respective repository's method like below (here we want to do logging after the save) \n \n ```typescript\n@PostAuthorize(\"@currentUserAutherizationServiceImpl.logSavedEntity(principal, returnObject)\") \n<S extends T> S save(S entity); \n```\n \n## Relations using annotations (one to one , onetomany , manytoone , manyttomany)\n \nRelations between models can be established by adding following declarations. To explain we will be using following entities. \n \n  ```typescript\n@document({ name: 'subjects', strict: Strict.true }) \nclass SubjectModel { \n    @field() \n    name: string; \n} \n  \n@document({ name: 'students', strict: Strict.true }) \nclass StudentModel { \n    @field() \n    name: string; \n} \n  \n@document({ name: 'teachers', strict: Strict.true }) \nclass TeacherModel { \n    @field() \n    name: string; \n} \n```\n\n### OneToMany \nOne-to-many refers to the relationship between two entities A and B in which an element of A may be linked to many elements of B, but a member of B is linked to only one element of A.  \n  \nFor instance, think of A as mentor, and B as student. A mentor can have several students, but a student can have only one mentor. Following code snippet establish this relation on Teacher entity. \n ```typescript\n@document({ name: 'teachers', strict: Strict.true }) \nclass TeacherModel { \n    @field() \n    name: string; \n    @onetomany({ rel: 'students', itemType: StudentModel, embedded: false }) \n    mentoring: Array<StudentModel>; \n} \n```\n\nWe have different keywords while declaring the relation. These keywords are used in all the declaration. They are explained as below: \nName \nDescription \nRel \nSet document name to which this property is mapped to  \nitemType \nSet Entity type to which property is mapped to \nembedded \nSet to true will embed whole document as property value otherwise only primary key will be set as property value \n \n### ManyToOne \nMany-to-one is vice-versa implementation of one-to-many relation. It’s just that entity is present on other end.  \nWe will use example from OneToMany example and add that relation on Student entity. \n ```typescript\n@document({ name: 'students', strict: Strict.true }) \nclass StudentModel { \n    @field() \n    name: string; \n    @manytoone({ rel: 'students', itemType: TeacherModel, embedded: false }) \n    mentor: TeacherModel; \n} \n```\n\n### OneToOne \nOne-to-one refers to the relationship between two entities A and B in which one element of A may only be linked to one element of B, and vice versa.\nFor instance, think of A as teacher, and B as subject. A teacher has only one subject, and a subject is taught by only one teacher. Following code snippet establish this relation on Teacher entity.\n ```typescript\n@document({ name: 'teachers', strict: Strict.true })\nclass TeacherModel { \n    @field() \n    name: string; \n    @onetoone({ rel: 'subjects', itemType: SubjectModel, embedded: false })\n    subject: SubjectModel; \n}  \n```\n\n### ManyToMany\nMany-to-many refers to the relationship between two entities A and B in which A may contain a parent record for which there are many children in B and vice versa.\nFor instance, think of A as Student, and B as Subject. A student can have several subjects, and a subject can be taken by several students. Following code snippet establish this relation on Student entity.\n ```typescript\n@document({ name: 'students', strict: Strict.true })\nclass StudentModel {\n    @field()\n    name: string;\n    @manytomany({ rel: 'subjects', itemType: SubjectModel, embedded: false }) \n    subjects: Array<SubjectModel>;\n}\n```\n\n## Embedded relations support (*replication*)\nA relation can be saved two ways: \n1. Link to the related document \n2. Embed the related document \nEmbedding document helps to get the object and relational data using single query from database thus reducing the database/server hits. This behaviour is managed by using ‘embedded’ keyword. When set to true, it fetches the document and embed whole document into the property. In this case, document is replicated and managed by the system. All the embedded document’s update/delete will automatically update the parent document. \n  \n*For embedded, please make sure that there is no circular embedding into the system. Although system checks for any circular embedding of the object and throws error.* \n\n \nTransaction and services using annotations - (Not Yet Implemented) \nAt the moment, transaction is not supported. But eventually, we will support basic transactions using @transactional annotation.  \nRefer to: [Website] (https://docs.mongodb.org/manual/tutorial/perform-two-phase-commits/) for mongodb transaction. \n  \n## DI container\n \nNode-data implements a light-weight annotation driven dependency-injection container. All the services(@service) and repositories(@repository) can be injected in other classes. Construction injection (only for services) and property injection are supported currently. To inject the dependency, use the annotation @inject. @inject takes optional \"type\" parameter. When type cannot be inferred from the usage (interface or other types), we can pass the \"concrete\" type as a parameter to inject. \nCurrently, we support concrete types only. If anyone wants to use interfaces, check out [Website] (http://inversify.io/) for more. \n\n*Usage*\n ```typescript\n@service({singleton: true}) \nclass MyService{ \n... \n} \n```\n*Inject dependency in another service(constructor and property)* \n ```typescript\n@service() \nclass MyAnotherService{ \n@inject() \nprivate myServiceAsProp: MyService; \n \n// constructor injection \nconstructor(@inject() myService: MyService){ \n} \n} \n```\n\n*Inject dependency in any another class(only property injection as of now)*\n ```typescript\nclass MyNormalClass { \n@inject() \nprivate myService: MyService; \n@inject() \nprivate myAnotherService: MyAnotherService; \n}\n```\n \n## Caching second level \nThe proposal for caching is like below\n```typescript\n@document({ name: 'courses', strict: Strict.throw })\n@cache({expirtion: Policy.Update ,concurrencyStrategy:Strategy.Read_Write })\nexport class CourseModel {\n    @field({ primary: true, autogenerated: true })\n    _id: Types.ObjectId;\n\n    @field()\n    name: String;\n\n    @onetomany({ rel: 'teachers', biDirectional: true})\n    @cache\n    teachers: Array<TM.TeacherModel>;\n\n    @manytomany({rel: 'students', biDirectional: false})\n    students: Array<SM.StudentModel>;\n}\n```\nIn above example the courses in the system will be cached as per policy and concurrency defined . if you look for teachers for a course that will be served by the cache but if you look for students for a course that will come from persitent in lazy loading manner.\n\nThe choice for Caching (Redis , memcahed ,local) and its setting can be define in config.ts file.\n \n## Search and count (inbuilt elastic search)(repository and query dsl) \n\n### Searching \nSearching is done on MongoDB by default. \nProvision is made to search using elasticsearch by changing the settings in the Config file. \nSearch on elasticsearch is currently done only on fields that are indexed in the elasticsearch. \nAll the search methods are needed to be exposed on the Repository. \nCurrently only the \"And\" search operations are supported. \n \n### Configuring ElasticSearch: \n\n### Installation:\nElastic search can be installed from https://www.elastic.co/\n### Config Class:  \nSet \"ApplyElasticSearch\" to true to enable ElasticSearch \nSet the path of the ElasticSearch service at \"ElasticSearchConnection\" \n \n### Model Class:  \nFor all the fields where the ElasticSearch indexing is requried, set the property in \"@field\" as \"searchIndex:true\" \ne.g. As in the \"name\" and \"age\" properties, the searchIndex is set to true. \n ```typescript\nclass PersonModel { \n    @field({searchIndex : true}) \n    name: string; \n \n    @field() \n    lastname: string; \n \n    @field({searchIndex : true}) \n    age: number; \n \n    constructor(){ \n    }\n} \n```\n\n### Configuring Search:  \nAll the search methods are defined at the Repository classes. \nCurrently the methods are needed to be defined in a fixed format.  \nThe method name should start with \"findBy\".  \nIt should then be followed by all the fields that are needed to be searched joined by \"And\" \n \ne.g. \n ```typescript\nclass PersonRepository { \n    findByName() { \n    } \n    findByNameAndAge() { \n    } \n    findByNameAndLastname(){ \n    } \n} \n```\n \n### How the search happens: \n \nThe API's are defined in such a way that if ALL of the fields to be searched are indexed, then the data is fetched from ElasticSearch. \nIf any one the fields to be searched is NOT indexed in ElasticSearch, the data is fetched from MongoDB. \nLet us consider the above mentioned \"PersonModel\" and \"PersonRepository\" \nThe methods \"findByName\" and \"findByNameAndAge\", queries using the fields \"name\" and \"age\". Since they are defined as Indexed, the data will be fetched from ElasticSearch. \nThe method \"findByNameAndLastname\", queries \"name\" and \"lastname\". Since \"lastname\" is not defined as indexed, the data will be fetched from MongoDB. \n\n\n## Logging \n\nIt will be completely on developers hand , The framework will allow the metadata of a class , method with logging attribute to be accessible to developers.\nUser can also inject the logger using DI.\n ```typescript\nclass Calculator{\n\t@log\n    add(a: number, b: number){\n    \treturn a + b;\n    }\n}\n```\n\n## Auditing\nThe proposal for Auditing is @Audit attribute which can be applied over model or over repository or in both.\n```typescript\n@Audit({auditModel: CourseAuditModel})\nexport class CourseModel {\n}\n```\nIf appllied over model then developer needs to create a audit schema model similar to current model , remove any non auditable field and add audit fields (createdby, lastmodifiedby, deletedby, createddate, lastmodifieddatae) (or extend from). then this new audit schema model need to be passed as a parameter in attribute. If no schmea is provided then framework will autmatically create audit schema including all columns.\n\n```typescript\n@repository({ path: 'blogs', model: BlogModel })\nexport interface BlogRepository extends dataRepository {\n    @Audit\n\tsave();\n}\n```\nIf appllied over repository then all write opertation will be audited in a dedicated document for the model.\n\n\n## Optimistic Locking\nThe docuement databases are infamous for concurrent updates . in high concurrency the situation multifolds itself. we are proposing a simple mechanism of optimatic locking by decorating the suspected method on repository by\n```typescript\n@OptimisticLocking(type = OptimisticLockType.VERSION)\nsave()\n```\nin other to support it the corresponding model should have a column decorated with @version attribute\n```typescript\n@Version\n@JsonIgnore\n@field(name = \"version\")\nversion: int;\n```\n@version attribute could be applied to int , date fields. Once this is done , for every write query the version check will be apllied hence if somone has stale data it won't be allowed to write.\n\n## Graphql support \nFor Graphql, atrribute over the  Model will enable the graph queries to be executed.like \n```typescript\n@document({ name: 'users', strict: Strict.true }) \n@Graphql\nclass UserModel { \n    @field() \n    name: string; \n    @manytomany({ rel: 'friends', itemType: FreindModel, embedded: true }) \n    friends: Array<FriendModel>; \n} \n```\nOnce define like above the framework will automatically add GraphqlObjectType and GraphqlSchema.\n\nExample GraphQL query (request body for post on /user/grpahql/):\n```javascript\nuser(id: \"1\") {\n  name\n  friends {\n    name\n  }\n}\n```\nExample response:\n```json\n{\n  \"data\": {\n    \"user\": {\n      \"name\": \"John Doe\",\n      \"friends\": [\n        {\n          \"name\": \"Friend One\"\n        },\n        {\n          \"name\": \"Friend Two\"\n        }]\n      }\n    }\n  }\n  ```\nExample GraphQL mutation:\n```javascript\nmutation updateUser($userId: String! $name: String!) {\n  updateUser(id: $userId name: $name) {\n    name\n  }\n}\n``` \n## Meta-data API\n\nMetadata gives the structure of the object. The structure consists of the properties defined in the entities. \n\nFor e.g. ‘http://localhost/metadata’ will return all the objects metadata : \n```json\n{ \n  \"_links\": [ \n    { \n      \"name\": \"subjects\", \n      \"metadata\": \"http://localhost/Metadata/subjects\" \n    }, \n    { \n      \"name\": \"students\", \n      \"metadata\": \"http://localhost/Metadata/students\" \n    }, \n    { \n      \"name\": \"teachers\", \n      \"metadata\": \"http://localhost/Metadata/teachers\" \n    } \n  ] \n} \n```  \nFurther running ‘http://localhost/Metadata/students’ will give:\n```json\n{ \n  \"id\": \"students\", \n  \"properties\": [ \n    { \n      \"name\": \"name\", \n      \"type\": \"String\" \n    }, \n    { \n      \"name\": \"subjects\", \n      \"type\": [ \n        \"http://localhost/Metadata/subjects\" \n      ] \n    } \n  ] \n} \n```\nFor primitive types, name of the type is shown.  If the entity has a relationship with another entity then the link of that object's metadata is shown. \n \n## Security (inbuilt authentication) ,role based autherization , acl \n \n### System has two types of inbuilt authentication:  \n1. *Session based* \n2. *Token based* \n \n### Session based \nIt takes the username and password from a user, validates it against the user document in the mongodb. If user is found it creates a session for it. \nTo use this a user needs to edit the config.ts file. \n```typescript\nexport class Security { \n    public static isAutheticationEnabled: boolean = true; \n    public static isAuthorizationEnabled: boolean = false; \n    public static isAutheticationByUserPasswd: boolean = true; \n    public static isAutheticationByToken: boolean = false; \n} \n```\nBoth isAutheticationEnabled  and isAutheticationByUserPasswd should be set to TRUE.  \nisAutheticationByUserPasswd  and  isAutheticationByToken are mutually exclusive.   \n \n### Token Based \nIt takes the username and password from a user, validates it against the user document in the mongodb. If user is found it creates a token and a refreshToken for that user, and stores in user document itself. Session is not created in this case.  \nThe token expiry time can be set in security-config.ts file. \n ```typescript\npublic static tokenExpiresInMinutes: number = 2;//2 minutes. \n```\nThe token is set in the cookies and sent to the browser.Using that token, user is considered valid, and provided access to the system. \nOnce the token is expired, user can just hit the /token API with refreshToken as the query param. RefreshToken value can be found in the browser cookies. This API will generate a new token for the user, and replace the old token in the user document in the DB, as well as in the cookies. Using the new token user can access the system again, without having to login again and again. \n \nTo enable token based authentication just edit the config.ts file in following manner \n```typescript\nexport class Security { \n    public static isAutheticationEnabled: boolean = true; \n    public static isAuthorizationEnabled: boolean = false; \n    public static isAutheticationByUserPasswd: boolean = false; \n    public static isAutheticationByToken: boolean = true; \n} \n```\nCurrently any user who is AUTHENTICATED, has access to the entire DB. This is because, AUTHORIZATION is not implemented. In the absence of authorization, the user has access to every document in the db. \n\n### FaceBook Authentication(SSO) \n\nFacebook authentication uses facebook to authenticate a user. If the user is present in the db, it stores the token in the user document and creates a session for the user in the application. In case its a new user, it first creates the user in the DB and then creates a session for the user in the application. \nTo enable it the only thing needs to be done is in the config.ts file. \n```typescript\nexport class Security {\n    public static isAutheticationEnabled: boolean = true;\n    public static isAuthorizationEnabled: boolean = false;\n    public static isAutheticationByUserPasswd: boolean = true; \n    public static isAutheticationByToken: boolean = false; \n}\n```\n\n## Everything is promise (*no callback hell*)\nCallback-Hell in nodejs occurs when we have multiple levels of callbacks(as shown in the sample below). This severely affects readablitly of the code. Node-data internally uses [Q](https://github.com/kriskowal/q/wiki/API-Reference) to wrap the function calls and returns a promise. Using Promise chains flattens the pyramid and the code is cleaner.\n ```typescript\n return Q.nbind(this.find, this)(params)\n        .then(result => doSomething(params1))\n        .then(result => doSomethingElse(params2))\n        ...\n        .catch(error => Q.reject(error))\n ```\nInstead of (Callback hell):\n```typescript\nthis.find(params, (error, data) => {\n\tdoSomething(params1, (error, data) => {\n\t\tdoSomethingElse(params2, (error, data) => {\n\t\t\t...\n\t\t});\n\t});\n})\n```\n\n## Validation\nProposal is to create a validation service where annotations will be used to validate required attributes in any entity.\n\nFor example check below code fragment\n\n```typescript\nclass UserModel { \n    \n    @field() \n    @NotNull() // to ensure that this attribute is never null\n    name: string;   \n    \n    @field() \n    @number() // to ensure that this attribute is integer\n    age: number; \n    \n    @field() \n    @email() // to ensure that this attribute is in mail format\n    email: string; \n    \n    @field() \n    @length(10) // to ensure that this attribute is not having more than 10 char, and all char are numbers\n    mobileNumber: string; \n    \n    @field() \n    @min(10)\n    @max(20)// to ensure that this attribute is not more than 20 and not less than 10\n    count: number;      \n} \n```\n\nThe user will have freedom to choose the entity attribute to be validated before save or update.\n\n## statistics/count API\nFurther running ‘http://localhost/statistics/students’ will give:\n```json\n{ \n  \"id\": \"students\", \n  \"properties\": [ \n    { \n      \"name\": \"count\", \n      \"type\": \"number\",\n      \"value\":15\n    }\n  ] \n} \n```\nFurther running ‘http://localhost/statistics/’ will give:\n```json\n[{ \n  \"id\": \"students\", \n  \"properties\": [ \n    { \n      \"name\": \"count\", \n      \"type\": \"number\",\n      \"value\":15\n    }\n  ] \n},\n{ \n  \"id\": \"teachers\", \n  \"properties\": [ \n    { \n      \"name\": \"count\", \n      \"type\": \"number\",\n      \"value\":5\n    }\n  ] \n},\n] \n```\nwhere condition is supported\n\n## Diffrence between waterline and Node-Data\nThe waterline is a greate opensource porject and has been an inspiration for us but there is a big difference between Node-data and waterline . The Node-Data is not an another ORM , its a wrapper over famous ORMs like(mongoose , seqlize , neo4j) . Node-Data provides an abstraction over these famous ORMs so that Developer don't have to deal with them individually and they can write models and transaction over these ORMs with same codebase. \n\n## pure js project supported\nNode-data now is fully supported inside a normal js project , no typescript dependency (check BMMaster branch for template)\n\n## bulk and performance improvements\n## Entity Manager\n```typescript\npreUpdate(params: EntityActionParam): Q.Promise<EntityActionParam> {\n        return Q.resolve(params);\n    }\n\npostUpdate(params: EntityActionParam): Q.Promise<EntityActionParam> {\n        return Q.when(params);\n    }\nexport interface EntityActionParam {\n    inputEntity?: any;\n    oldPersistentEntity?: any;\n    newPersistentEntity?: any\n}    \n```   \n## Transaction \n   no transaction on documents(@document) side , @transaction is supported on sql entities(@entity) repositories\n   if calling a document transaction within a method with @transaction , it will not rollback and developer need to handle this.\n## process control\n```typescript\n    @processStartEnd({ action: \"importLead\", type: \"project\", indexofArgumentForTargetObjectId: 1 })\n    public read(filePath: string, projectId, toDelete?) {\n    }\n```\n## Workers and Async Api\n```typescript\n    @worker()\n    public read(filePath: string, projectId, toDelete?) {\n    }\n```\nquick response with  \n```json\n{ \n  \"id\": \"3423423\",\n  \"processName\":\"\",\n  \"status\":\"inprogress\"\n  \"subscriptionProperties\": [ \n    { \n      \"channel_id\": \"3423\", \n      \"type\": \"pushnotification\",\n      \"event_id\":15,\n      \"action_id\":16\n    },\n     { \n      \"url\":\"http://localhost:8080/data/process/3dfgs3/\",\n      \"token\":\"324324fsdfs32rfsd\",\n      \"type\": \"rest\",\n      \"metadata\":{}\n    }\n  ] \n} \n```\n\n## Messageing\nin a service class\n```typescript\n    @producer(topic,partition)\n    public read(filePath: string, projectId, toDelete?) {\n    }\n```\n```typescript\n    @consumer(topic,partition,instances)\n    public read(filePath: string, projectId, toDelete?) {\n    }\n```\n\n\n[JIRA URL] (https://node-data.atlassian.net/secure/RapidBoard.jspa?rapidView=2&view=detail) \n\n<img src=\"https://raw.githubusercontent.com/ratneshsinghparihar/Node-Data/master/images/talentica.png\" width=\"200\"><img src=\"https://raw.githubusercontent.com/ratneshsinghparihar/Node-Data/master/images/atlassian.png\" width=\"200\">\n<img src=\"https://raw.githubusercontent.com/ratneshsinghparihar/Node-Data/master/images/realsociable.png\" width=\"200\"><img src=\"https://www.gep.com/sites/default/files/mediakit/GEP-Logo-SVG.svg\" width=\"200\">\n<img src=\"http://2016.aiworld.com/wp-content/uploads/2013/12/datalogai360x280.jpg\" width=\"200\"><img src=\"http://2016.aiworld.com/wp-content/uploads/2016/09/verve-360x280e-360x280.jpg\" width=\"200\">\n<img src=\"http://gyanprakash.org/Images/logo.png\" width=\"200\">\n",
  "readmeFilename": "README.md",
  "scripts": {
    "cover": "istanbul cover node_modules/jasmine/bin/jasmine.js -x *.spec.js",
    "start": "node server.js",
    "test": "jasmine",
    "testone": "jasmine ",
    "tsd": ""
  },
  "version": "2.15.7"
}
